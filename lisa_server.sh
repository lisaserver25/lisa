#!/bin/bash

#---------------------------------------------------
# Script: LisaServer.com
# Versi√≥n: 6.9 (Estable, con logo naranja)
# Finalidad: Monitorizaci√≥n y gesti√≥n del servidor.
#---------------------------------------------------

# --- Definici√≥n de Colores y Emoticonos (Formato robusto) ---
NC=$'\033[0m'      # Sin Color
BOLD=$'\033[1m'
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[0;33m'
CYAN=$'\033[0;36m'
MAGENTA=$'\033[0;35m'
ORANGE=$'\033[38;5;208m' # Color Naranja

# --- Funci√≥n para comprobar e instalar dependencias ---
check_dependencies() {
    echo -e "${CYAN}Verificando las dependencias necesarias...${NC}"
    local missing_apt=()

    for pkg in wget vnstat neofetch; do
        if ! command -v "$pkg" &> /dev/null; then
            missing_apt+=("$pkg")
        fi
    done

    if [ ${#missing_apt[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Todas las dependencias est√°n en orden.${NC}"; sleep 1; return 0;
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  Se requiere instalar: ${missing_apt[*]}.${NC}"
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}‚ùå Para continuar, por favor ejecuta el script con sudo:${NC}"
        echo -e "   sudo $0"; exit 1;
    fi
    
    read -p "¬øDeseas que el script realice la instalaci√≥n ahora? (s/n): " choice
    if [[ "$choice" != "s" && "$choice" != "S" ]]; then
        echo "Instalaci√≥n omitida."; return 1;
    fi

    echo "Instalando paquetes APT: ${missing_apt[*]}..."
    apt-get update &> /dev/null
    if ! apt-get install -y "${missing_apt[@]}"; then
         echo -e "${RED}‚ùå Error instalando paquetes con APT.${NC}"
    else
         echo -e "${GREEN}‚úÖ Paquetes instalados correctamente.${NC}"
    fi
}

# --- FUNCIONES DE ADMINISTRACI√ìN ---

change_hostname(){
    read -p "Introduce el nuevo nombre de host: " new_hostname
    if [ -z "$new_hostname" ]; then echo -e "${RED}El nombre no puede estar vac√≠o.${NC}"; return; fi
    hostnamectl set-hostname "$new_hostname"
    echo -e "${GREEN}‚úÖ Nombre de host cambiado a '${BOLD}$new_hostname${GREEN}'.${NC}"
    echo -e "${YELLOW}Necesitas reiniciar o volver a iniciar sesi√≥n para ver el cambio en todas partes.${NC}"
}

change_root_password(){
    echo -e "${YELLOW}A continuaci√≥n, se te pedir√° la nueva contrase√±a para el usuario 'root'.${NC}"
    passwd root
}

create_myuser(){
    echo -e "${YELLOW}Este comando crear√° el usuario 'myuser' con contrase√±a 'lisa25' y sudo.${NC}"
    read -p "¬øEst√°s seguro de que quieres continuar? (s/n): " confirm
    if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
        echo "Ejecutando el comando de creaci√≥n de usuario..."
        useradd -s /bin/bash myuser && echo 'myuser:lisa25' | chpasswd && usermod -aG sudo myuser && echo 'myuser ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/myuser && chmod 440 /etc/sudoers.d/myuser && history -c && cat /dev/null > ~/.bash_history && unset HISTFILE && rm -f /root/.bash_history /home/myuser/.bash_history /var/log/wtmp /var/log/btmp
        echo -e "${GREEN}‚úÖ Proceso completado.${NC}"
    else
        echo "Operaci√≥n cancelada."
    fi
}

# --- FUNCIONES DE MONITORIZACI√ìN Y AN√ÅLISIS ---

get_server_specs() {
    echo -e "\n${CYAN}--- üíª Especificaciones del Servidor (con Neofetch) ---${NC}"
    neofetch
}

get_download_speed() {
    echo -e "\n${CYAN}--- üì• Probando Velocidad de Descarga ---${NC}"
    wget -O /dev/null http://ipv4.download.thinkbroadband.com/100MB.zip
}

get_data_usage() {
    if ! command -v vnstat &> /dev/null; then echo -e "\n${RED}üö´ 'vnstat' no est√° instalado.${NC}"; return; fi

    echo -e "\n${CYAN}${BOLD}--- üìä MONITOR DE CONSUMO DE DATOS ---${NC}"
    local interface; interface=$(ip route | grep default | sed -e 's/^.*dev.//' -e 's/.proto.*//' | head -n1 || echo "eth0")
    echo -e "Mostrando estad√≠sticas para la interfaz: ${YELLOW}${interface}${NC}\n"

    local vnstat_output; vnstat_output=$(vnstat -i "$interface")
    if [ -z "$vnstat_output" ]; then
        echo -e "${YELLOW}No se pudieron obtener datos de 'vnstat'. ¬øEl servicio est√° en ejecuci√≥n y ha recolectado datos?${NC}"; return;
    fi

    print_data_line() {
        local emoji=$1; local label=$2; local line_data=$3; local color=$4
        if [ -n "$line_data" ]; then
            local rx_val=$(echo "$line_data" | awk '{print $2}'); local rx_unit=$(echo "$line_data" | awk '{print $3}')
            local tx_val=$(echo "$line_data" | awk '{print $5}'); local tx_unit=$(echo "$line_data" | awk '{print $6}')
            local total_val=$(echo "$line_data" | awk '{print $8}'); local total_unit=$(echo "$line_data" | awk '{print $9}')
            
            local received_str=$(printf "%s %s" "$rx_val" "$rx_unit")
            local sent_str=$(printf "%s %s" "$tx_val" "$tx_unit")
            local total_str=$(printf "%s %s" "$total_val" "$total_unit")

            printf " ${emoji} %-16s | ${GREEN}%-18s${NC} | ${CYAN}%-18s${NC} | ${color}%-18s${NC}\n" \
                "$label" "$received_str" "$sent_str" "$total_str"
        fi
    }

    printf "   %-16s | %-18s | %-18s | %-18s\n" "PERIODO" "RECIBIDO (‚Üì)" "ENVIADO (‚Üë)" "TOTAL"
    echo "------------------------------------------------------------------------------------------"
    
    local today_line=$(echo "$vnstat_output" | grep -wE "hoy|today")
    local yesterday_line=$(echo "$vnstat_output" | grep -wE "ayer|yesterday")
    
    local all_monthly_lines=$(echo "$vnstat_output" | awk '/monthly/,/daily/' | grep -E "\w{3,4} '[0-9]{2}")
    local current_month_line=$(echo "$all_monthly_lines" | tail -n 1)
    local previous_month_line=""
    if [ "$(echo "$all_monthly_lines" | wc -l)" -gt 1 ]; then
        previous_month_line=$(echo "$all_monthly_lines" | tail -n 2 | head -n 1)
    fi

    local last_30_days_line=$(echo "$vnstat_output" | awk '/daily/,/monthly/' | grep -E "total")


    print_data_line "‚òÄÔ∏è" "Hoy" "$today_line" "${BOLD}${YELLOW}"
    print_data_line "üåô" "Ayer" "$yesterday_line" "${NC}"
    print_data_line "üìÖ" "Mes Actual" "$current_month_line" "${BOLD}${GREEN}"
    print_data_line "‚èÆÔ∏è" "Mes Pasado" "$previous_month_line" "${NC}"
    print_data_line "üóìÔ∏è" "√öltimos 30 d√≠as" "$last_30_days_line" "${BOLD}${MAGENTA}"
    
    echo "------------------------------------------------------------------------------------------"
}

show_disk_space() {
    echo -e "\n${CYAN}${BOLD}--- üíæ AN√ÅLISIS DE ESPACIO EN DISCO ---${NC}\n"
    local total_line=$(df -hP --total | grep 'total')
    local total_size=$(echo "$total_line" | awk '{print $2}')
    local total_used=$(echo "$total_line" | awk '{print $3}')
    local total_avail=$(echo "$total_line" | awk '{print $4}')
    local total_percent=$(echo "$total_line" | awk '{print $5}')

    echo -e "${YELLOW}   --- RESUMEN GENERAL ---${NC}"
    echo -e "   Capacidad Total:   ${BOLD}${total_size}${NC}"
    echo -e "   Espacio Utilizado:  ${BOLD}${total_used}${NC} (${BOLD}${total_percent}${NC})"
    echo -e "   Espacio Disponible:${BOLD}${total_avail}${NC}"
    echo -e "   -----------------------"
    echo -e "\n${YELLOW}   --- DETALLE POR DISCO ---${NC}"
    
    printf "%-20s | %-8s | %-8s | %-8s | %-5s | %-22s\n" "MONTADO EN" "TAMA√ëO" "USADO" "DISP." "USO%" "GR√ÅFICO DE USO"
    echo "-------------------------------------------------------------------------------------------------"
    df -hP | grep '^/dev/' | while read -r filesystem size used available use_percent mountpoint; do
        p_num=${use_percent//%}; local color=$GREEN; local emoji="‚úÖ"
        if (( p_num >= 90 )); then color=$RED; emoji="üö®"; elif (( p_num >= 75 )); then color=$YELLOW; emoji="‚ö†Ô∏è "; fi
        let "bar_filled=p_num/5"; let "bar_empty=20-bar_filled"
        bar_str=$(printf "%${bar_filled}s" | tr ' ' '‚ñà')$(printf "%${bar_empty}s" | tr ' ' '‚ñë')
        echo -e "$(printf "%-20s | %-8s | %-8s | %-8s | " "$mountpoint" "$size" "$used" "$available")${color}$(printf "%-5s" "$use_percent")${NC} | [${color}${bar_str}${NC}] $emoji"
    done
}

show_last_logins() {
    echo -e "\n${CYAN}${BOLD}--- üïµÔ∏è √öLTIMOS 20 INICIOS DE SESI√ìN ---${NC}"
    last -n 20
}

show_top_processes() {
    echo -e "\n${CYAN}${BOLD}--- üöÄ PROCESOS CON MAYOR CONSUMO ---${NC}\n"
    echo -e "${YELLOW}--- Top 5 Consumo de CPU ---${NC}"; ps -eo pcpu,pid,user,args --sort=-pcpu | head -n 6
    echo ""; echo -e "${YELLOW}--- Top 5 Consumo de Memoria ---${NC}"; ps -eo pmem,pid,user,args --sort=-pmem | head -n 6
}

check_service_status() {
    echo -e "\n${CYAN}${BOLD}--- üü¢ CONSULTAR ESTADO DE UN SERVICIO ---${NC}\n"
    read -p "Introduce el nombre del servicio a consultar (ej: nginx, sshd): " service_name
    if [ -n "$service_name" ]; then systemctl status "$service_name"; else echo -e "${RED}No se introdujo un nombre.${NC}"; fi
}

show_active_ports() {
    echo -e "\n${CYAN}${BOLD}--- üåê PUERTOS DE RED EN ESCUCHA (TCP/UDP) ---${NC}\n"
    echo "Si alg√∫n proceso es '-', ejecuta el script con 'sudo' para ver todos los nombres."
    ss -tulnp
}

# --- FUNCIONES DE SISTEMA ---

reboot_server() {
    read -p "$(echo -e "${RED}${BOLD}¬øEST√ÅS SEGURO DE QUE QUIERES REINICIAR? (s/n): ${NC}")" confirm
    if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
        echo -e "${YELLOW}Reiniciando en 3 segundos...${NC}"; sleep 3; reboot;
    else
        echo "Reinicio cancelado."
    fi
}

self_destruct() {
    read -p "$(echo -e "${RED}${BOLD}ADVERTENCIA: ¬øSeguro que quieres borrar el script y el historial? (escribe 'borrar'): ${NC}")" confirm
    if [[ "$confirm" == "borrar" ]]; then
        history -c; cat /dev/null > ~/.bash_history; unset HISTFILE
        if [[ $EUID -eq 0 ]]; then cat /dev/null > /root/.bash_history; fi
        echo -e "${GREEN}Script y rastros eliminados. ¬°Adi√≥s! üëã${NC}"; rm -- "$0"; exit 0;
    else
        echo "Operaci√≥n cancelada."
    fi
}

# --- BUCLE PRINCIPAL DEL MEN√ö ---
while true; do
    clear; printf '\n\n\n\n\n\n'
    
    # --- CABECERA GR√ÅFICA ---
    echo -e "${ORANGE}${BOLD}"; echo '        ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó '; echo '        ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó'; echo '        ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë'; echo '        ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë'; echo '        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë'; echo '        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù'; echo -e "${NC}"
    echo -e "                   ${YELLOW}LisaServer.com${NC}"
    echo -e "       ${YELLOW}Panel de Gesti√≥n y Monitorizaci√≥n v6.9${NC}"; echo ""

    # --- MEN√ö DE UNA SOLA COLUMNA ---
    
    echo -e "${MAGENTA}${BOLD}   --- üõ†Ô∏è ADMINISTRACI√ìN ---${NC}"
    echo -e "      ${GREEN}1.${NC}${CYAN} Cambiar Nombre de Host"
    echo -e "      ${GREEN}2.${NC}${CYAN} Cambiar Pass de Root"
    echo -e "      ${GREEN}3.${NC}${YELLOW} Crear Usuario 'myuser'"
    echo ""

    echo -e "${MAGENTA}${BOLD}   --- üìä MONITORIZACI√ìN Y AN√ÅLISIS ---${NC}"
    echo -e "      ${GREEN}4.${NC}${CYAN} Especificaciones Servidor üíª"
    echo -e "      ${GREEN}5.${NC}${CYAN} Test de Velocidad üì•"
    echo -e "      ${GREEN}6.${NC}${CYAN} Consumo de Datos üìà"
    echo -e "      ${GREEN}7.${NC}${CYAN} Espacio en Disco üíæ"
    echo -e "      ${GREEN}8.${NC}${CYAN} √öltimos Logins üïµÔ∏è"
    echo -e "      ${GREEN}9.${NC}${CYAN} Top 5 Procesos üöÄ"
    echo -e "      ${GREEN}10.${NC}${CYAN} Estado de Servicio üü¢"
    echo -e "      ${GREEN}11.${NC}${CYAN} Puertos Activos üåê"
    echo ""

    echo -e "${MAGENTA}${BOLD}   --- ‚öôÔ∏è SISTEMA ---${NC}"
    echo -e "      ${CYAN}20.${NC}${RED} Reiniciar Servidor"
    echo -e "      ${CYAN}99.${NC}${BOLD}${RED} Borrar Script (Peligro!)"
    echo -e "      ${CYAN}0.${NC}${RED} Salir"
    echo ""

    read -p "$(echo -e "${YELLOW}   Selecciona una opci√≥n: ${NC}")" choice

    case $choice in
        1) change_hostname ;; 2) change_root_password ;; 3) create_myuser ;;
        4) get_server_specs ;; 5) get_download_speed ;; 6) get_data_usage ;;
        7) show_disk_space ;; 8) show_last_logins ;; 9) show_top_processes ;;
        10) check_service_status ;; 11) show_active_ports ;;
        20) reboot_server ;; 99) self_destruct ;;
        0) echo -e "\n${MAGENTA}Saliendo... ¬°Hasta luego! ‚ú®${NC}\n"; exit 0 ;;
        *) echo -e "\n${RED}Opci√≥n no v√°lida.${NC}" ;;
    esac
    read -p "$(echo -e "\n${YELLOW}   Presiona Enter para volver al men√∫...${NC}")"
done